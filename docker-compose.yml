services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./config:/app/config
      - ./.env:/app/.env
    networks:
      - backend
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME:-realtimechat}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-realtimechat}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - backend
    restart: unless-stopped

volumes:
  pgdata:
    name: "${COMPOSE_PROJECT_NAME:-realtimechat}_pgdata"

networks:
  backend:
    driver: bridge